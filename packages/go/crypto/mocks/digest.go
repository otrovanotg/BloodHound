// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/crypto (interfaces: SecretDigest,SecretDigester)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	crypto "github.com/specterops/bloodhound/crypto"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretDigest is a mock of SecretDigest interface.
type MockSecretDigest struct {
	ctrl     *gomock.Controller
	recorder *MockSecretDigestMockRecorder
}

// MockSecretDigestMockRecorder is the mock recorder for MockSecretDigest.
type MockSecretDigestMockRecorder struct {
	mock *MockSecretDigest
}

// NewMockSecretDigest creates a new mock instance.
func NewMockSecretDigest(ctrl *gomock.Controller) *MockSecretDigest {
	mock := &MockSecretDigest{ctrl: ctrl}
	mock.recorder = &MockSecretDigestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretDigest) EXPECT() *MockSecretDigestMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockSecretDigest) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSecretDigestMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSecretDigest)(nil).String))
}

// Validate mocks base method.
func (m *MockSecretDigest) Validate(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSecretDigestMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSecretDigest)(nil).Validate), arg0)
}

// MockSecretDigester is a mock of SecretDigester interface.
type MockSecretDigester struct {
	ctrl     *gomock.Controller
	recorder *MockSecretDigesterMockRecorder
}

// MockSecretDigesterMockRecorder is the mock recorder for MockSecretDigester.
type MockSecretDigesterMockRecorder struct {
	mock *MockSecretDigester
}

// NewMockSecretDigester creates a new mock instance.
func NewMockSecretDigester(ctrl *gomock.Controller) *MockSecretDigester {
	mock := &MockSecretDigester{ctrl: ctrl}
	mock.recorder = &MockSecretDigesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretDigester) EXPECT() *MockSecretDigesterMockRecorder {
	return m.recorder
}

// Digest mocks base method.
func (m *MockSecretDigester) Digest(arg0 string) (crypto.SecretDigest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Digest", arg0)
	ret0, _ := ret[0].(crypto.SecretDigest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Digest indicates an expected call of Digest.
func (mr *MockSecretDigesterMockRecorder) Digest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Digest", reflect.TypeOf((*MockSecretDigester)(nil).Digest), arg0)
}

// Method mocks base method.
func (m *MockSecretDigester) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockSecretDigesterMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockSecretDigester)(nil).Method))
}

// ParseDigest mocks base method.
func (m *MockSecretDigester) ParseDigest(arg0 string) (crypto.SecretDigest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseDigest", arg0)
	ret0, _ := ret[0].(crypto.SecretDigest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseDigest indicates an expected call of ParseDigest.
func (mr *MockSecretDigesterMockRecorder) ParseDigest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDigest", reflect.TypeOf((*MockSecretDigester)(nil).ParseDigest), arg0)
}
